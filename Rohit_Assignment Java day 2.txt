

1)create a class "Shape" with 2 attributes, "width" and "height". Make sure one can not access these attributes directly.
provide accessor methods on these attributes and allow them to call from outside of your class.
package Day1;
class Shape{
	private int width,height;

	public int getWidth() {
		return width;
	}

	public void setWidth(int width) {
		this.width = width;
	}

	public int getHeight() {
		return height;
	}

	public void setHeight(int height) {
		this.height = height;
	}
	
}
public class Assignment2 {

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		Shape s1=new Shape();
		s1.setHeight(5);
		s1.setWidth(6);

		
		System.out.println(s1.getHeight());
		System.out.println(s1.getWidth());

	}

}

2) Define a class "MyClass" and make sure clients can instantiate it , 
a) without any argument
b) with one int argument
c) with two int arguments

package Day1;
class MyClass{
	private int a,b;
	MyClass(){
		System.out.println("In no arg constructor");
	}
	
	MyClass(int i){
		a=i;
		System.out.println("In parameterized constructor with one int");
	}
	
	MyClass(int i,int j){
		a=i;
		b=j;
		System.out.println("In parameterized constructor with Two int");
	}
	
	
	
}
public class Assignment2 {

	public static void main(String[] args) {
		
		MyClass m1=new MyClass();
		MyClass m2=new MyClass(7);
		MyClass m3=new MyClass(7,8);
	}

}

3) Define a class "Emp" with private static member "int cnt".
How will u make sure that outsiders can read the value of cnt ?
package Day1;
class Emp{
	private static int cnt=9;

	
	public  static int getCnt() {
		return cnt;
	}

	
	
}
public class Assignment2 {
     public static void main(String[] args) {
    	 System.out.println("the value of count is : "+Emp.getCnt());
     }

}

4) Define a class "DemoOb". 
create an instance of it.
now create a reference and assign the reference created in the above statement.
	Discuss what happens?
Now since u have 2 references, take one of the reference and assign a new instance of the class.
	Discuss what happens?
(For ur discussion, write necessary comments in the program)
package Day1;
class DemoOb{
	DemoOb(int k){
		System.out.println("In default constructor "+k);
	}
	
}
public class Assignment2 {
     public static void main(String[] args) {
    	 DemoOb d1=new DemoOb(42);
    	 DemoOb d2=d1; //here d2 and d1 will point to the same object on the heap.
    	 
    	 d2=new DemoOb(56); //here d2 will now point to the new object created on the heap.
    	 
    	 
     }

}


5) Define 3 classes A , B and C
in all these classes create static and nonstatic variables as well as methods.
	Now Define a class "Demo" ,in which define "main" function. From this main function try to access all the members of A ,B  and C.


package Day1;
class A{
	private int num;
	private static int num1;
	public int getNum() {
		return num;
	}
	public void setNum(int num) {
		this.num = num;
	}
	public static int getNum1() {
		return num1;
	}
	public static void setNum1(int num1) {
		A.num1 = num1;
	}
	
	
}

class B{
	private int num;
	private static int num1;
	public int getNum() {
		return num;
	}
	public void setNum(int num) {
		this.num = num;
	}
	public static int getNum1() {
		return num1;
	}
	public static void setNum1(int num1) {
		B.num1 = num1;
	}
	
	
}

class C{
	private int num;
	private static int num1;
	public int getNum() {
		return num;
	}
	public void setNum(int num) {
		this.num = num;
	}
	public static int getNum1() {
		return num1;
	}
	public static void setNum1(int num1) {
		C.num1 = num1;
	}
	
	
}
public class Assignment2 {
     public static void main(String[] args) {
    	 A a=new A();
    	 A.setNum1(8);
    	 System.out.println(A.getNum1());
    	 a.setNum(46);
    	 System.out.println(a.getNum());
    	 
    	 B b=new B();
    	 B.setNum1(81);
    	 System.out.println(B.getNum1());
    	 b.setNum(78);
    	 System.out.println(b.getNum());
    	 
    	 C c=new C();
    	 C.setNum1(90);
    	 System.out.println(C.getNum1());
    	 b.setNum(785);
    	 System.out.println(b.getNum());
    	 
    	 
    	 
     }

}

6) define static initializers in the above A,B and C classes and check the order of their execution.

package Day1;
class A{
	private int num;
	private static int num1;
	static {
		System.out.println("In static block of A");
	}
	public int getNum() {
		return num;
	}
	public void setNum(int num) {
		this.num = num;
	}
	public static int getNum1() {
		return num1;
	}
	public static void setNum1(int num1) {
		A.num1 = num1;
	}
	
	
}

class B{
	private int num;
	private static int num1;
	static {
		System.out.println("In static block of B");
	}
	public int getNum() {
		return num;
	}
	public void setNum(int num) {
		this.num = num;
	}
	public static int getNum1() {
		return num1;
	}
	public static void setNum1(int num1) {
		B.num1 = num1;
	}
	
	
}

class C{
	private int num;
	private static int num1;
	static {
		System.out.println("In static block of C");
	}
	public int getNum() {
		return num;
	}
	public void setNum(int num) {
		this.num = num;
	}
	public static int getNum1() {
		return num1;
	}
	public static void setNum1(int num1) {
		C.num1 = num1;
	}
	
	
}
public class Assignment2 {
     public static void main(String[] args) {
    	 A a=new A();
    	 A.setNum1(8);
    	 System.out.println(A.getNum1());
    	 a.setNum(46);
    	 System.out.println(a.getNum());
    	 
    	 B b=new B();
    	 B.setNum1(81);
    	 System.out.println(B.getNum1());
    	 b.setNum(78);
    	 System.out.println(b.getNum());
    	 
    	 C c=new C();
    	 C.setNum1(90);
    	 System.out.println(C.getNum1());
    	 b.setNum(785);
    	 System.out.println(b.getNum());
    	 
    	 
    	 
     }

}






